# Generated by Django 4.2.24 on 2025-09-06 16:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(max_length=500)),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="CSS class or icon name (e.g., 'fas fa-server')",
                        max_length=50,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#3B82F6",
                        help_text="Hex color code for category theming",
                        max_length=7,
                    ),
                ),
                ("is_featured", models.BooleanField(default=False)),
                ("sort_order", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Tool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("is_published", models.BooleanField(default=False)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "meta_title",
                    models.CharField(
                        blank=True,
                        help_text="SEO title (max 60 characters recommended)",
                        max_length=255,
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(
                        blank=True,
                        help_text="SEO description (max 160 characters recommended)",
                        max_length=160,
                    ),
                ),
                (
                    "meta_keywords",
                    models.CharField(
                        blank=True, help_text="Comma-separated keywords", max_length=255
                    ),
                ),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("rating_sum", models.PositiveIntegerField(default=0)),
                ("rating_count", models.PositiveIntegerField(default=0)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("description", models.TextField(max_length=1000)),
                (
                    "tagline",
                    models.CharField(
                        blank=True, help_text="Short catchy description", max_length=200
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        default=list,
                        help_text="List of tags for better discoverability",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(blank=True, null=True, upload_to="tools/logos/"),
                ),
                (
                    "screenshot",
                    models.ImageField(
                        blank=True, null=True, upload_to="tools/screenshots/"
                    ),
                ),
                ("website_url", models.URLField()),
                ("github_url", models.URLField(blank=True)),
                ("documentation_url", models.URLField(blank=True)),
                ("pricing_url", models.URLField(blank=True)),
                (
                    "pricing_model",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("freemium", "Freemium"),
                            ("paid", "Paid"),
                            ("open_source", "Open Source"),
                            ("enterprise", "Enterprise"),
                        ],
                        default="freemium",
                        max_length=20,
                    ),
                ),
                (
                    "deployment_types",
                    models.JSONField(
                        default=list,
                        help_text="List of deployment options (cloud, on-premise, hybrid, etc.)",
                    ),
                ),
                (
                    "supported_platforms",
                    models.JSONField(
                        default=list,
                        help_text="List of supported platforms (AWS, GCP, Azure, etc.)",
                    ),
                ),
                (
                    "languages",
                    models.JSONField(
                        default=list,
                        help_text="Programming languages supported or used",
                    ),
                ),
                (
                    "features",
                    models.JSONField(default=list, help_text="List of key features"),
                ),
                (
                    "integrations",
                    models.JSONField(
                        default=list,
                        help_text="List of tools/services it integrates with",
                    ),
                ),
                (
                    "use_cases",
                    models.JSONField(
                        default=list, help_text="Common use cases and scenarios"
                    ),
                ),
                ("detailed_description", models.TextField(blank=True)),
                (
                    "pros",
                    models.JSONField(default=list, help_text="List of pros/advantages"),
                ),
                (
                    "cons",
                    models.JSONField(
                        default=list, help_text="List of cons/disadvantages"
                    ),
                ),
                ("company", models.CharField(blank=True, max_length=200)),
                ("founded_year", models.PositiveIntegerField(blank=True, null=True)),
                ("team_size", models.CharField(blank=True, max_length=50)),
                ("github_stars", models.PositiveIntegerField(default=0)),
                ("github_forks", models.PositiveIntegerField(default=0)),
                ("github_last_commit", models.DateTimeField(blank=True, null=True)),
                ("github_issues", models.PositiveIntegerField(default=0)),
                ("is_featured", models.BooleanField(default=False)),
                ("is_trending", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active Development"),
                            ("maintained", "Maintained"),
                            ("deprecated", "Deprecated"),
                            ("archived", "Archived"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("ai_summary", models.TextField(blank=True)),
                ("ai_review_generated", models.BooleanField(default=False)),
                ("ai_last_updated", models.DateTimeField(blank=True, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tools",
                        to="tools.category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tool",
                "verbose_name_plural": "Tools",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ToolComparison",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("is_published", models.BooleanField(default=False)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "meta_title",
                    models.CharField(
                        blank=True,
                        help_text="SEO title (max 60 characters recommended)",
                        max_length=255,
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(
                        blank=True,
                        help_text="SEO description (max 160 characters recommended)",
                        max_length=160,
                    ),
                ),
                (
                    "meta_keywords",
                    models.CharField(
                        blank=True, help_text="Comma-separated keywords", max_length=255
                    ),
                ),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(max_length=1000)),
                ("introduction", models.TextField(blank=True)),
                ("conclusion", models.TextField(blank=True)),
                ("recommendation", models.TextField(blank=True)),
                (
                    "criteria",
                    models.JSONField(
                        default=list,
                        help_text="List of comparison criteria (features, pricing, etc.)",
                    ),
                ),
                ("ai_generated", models.BooleanField(default=False)),
                ("ai_last_updated", models.DateTimeField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tool_comparisons",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tools",
                    models.ManyToManyField(related_name="comparisons", to="tools.tool"),
                ),
            ],
            options={
                "verbose_name": "Tool Comparison",
                "verbose_name_plural": "Tool Comparisons",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ToolReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("rating_sum", models.PositiveIntegerField(default=0)),
                ("rating_count", models.PositiveIntegerField(default=0)),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
                    ),
                ),
                (
                    "usage_duration",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("days", "A few days"),
                            ("weeks", "A few weeks"),
                            ("months", "A few months"),
                            ("year", "About a year"),
                            ("years", "Several years"),
                        ],
                        max_length=20,
                    ),
                ),
                ("use_case", models.CharField(blank=True, max_length=200)),
                ("team_size", models.CharField(blank=True, max_length=50)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_featured", models.BooleanField(default=False)),
                ("helpful_count", models.PositiveIntegerField(default=0)),
                ("not_helpful_count", models.PositiveIntegerField(default=0)),
                (
                    "tool",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="tools.tool",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tool_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Tool Review",
                "verbose_name_plural": "Tool Reviews",
                "ordering": ["-created_at"],
                "unique_together": {("tool", "user")},
            },
        ),
        migrations.AddIndex(
            model_name="tool",
            index=models.Index(
                fields=["category", "is_published"],
                name="tools_tool_categor_1cb4b5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tool",
            index=models.Index(
                fields=["is_featured", "is_published"],
                name="tools_tool_is_feat_446f4d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tool",
            index=models.Index(
                fields=["is_trending", "is_published"],
                name="tools_tool_is_tren_b764ee_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tool",
            index=models.Index(
                fields=["view_count"], name="tools_tool_view_co_3809e7_idx"
            ),
        ),
    ]
