# Generated by Django 4.2.24 on 2025-10-21 10:57

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("tools", "0006_tool_api_available_tool_api_documentation_url_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("monetization", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ConsultingPackage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField()),
                (
                    "package_type",
                    models.CharField(
                        choices=[
                            ("discovery", "Discovery Call - 30 min"),
                            ("strategy", "Strategy Session - 1 hour"),
                            ("deep_dive", "Deep Dive - 2 hours"),
                            ("workshop", "Team Workshop - Half Day"),
                            ("comprehensive", "Comprehensive Assessment - Full Day"),
                            ("ongoing", "Ongoing Retainer"),
                        ],
                        default="strategy",
                        max_length=50,
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "price_per_hour",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="For retainer packages",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("duration_hours", models.DecimalField(decimal_places=1, max_digits=4)),
                (
                    "preparation_time_hours",
                    models.DecimalField(
                        decimal_places=1, default=Decimal("1.0"), max_digits=4
                    ),
                ),
                (
                    "deliverables",
                    models.JSONField(
                        default=list, help_text="List of deliverables included"
                    ),
                ),
                (
                    "features",
                    models.JSONField(
                        default=list, help_text="Features of this package"
                    ),
                ),
                (
                    "prerequisites",
                    models.JSONField(
                        default=list, help_text="What client needs to provide"
                    ),
                ),
                (
                    "ideal_for",
                    models.JSONField(default=list, help_text="Ideal client scenarios"),
                ),
                ("max_bookings_per_month", models.IntegerField(default=4)),
                (
                    "advance_booking_days",
                    models.IntegerField(
                        default=7, help_text="Minimum days notice required"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("sort_order", models.IntegerField(default=0)),
                ("total_bookings", models.IntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=3
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["sort_order", "price"],
            },
        ),
        migrations.CreateModel(
            name="CustomRecommendation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("description", models.TextField()),
                (
                    "recommended_tools",
                    models.JSONField(
                        default=list, help_text="List of recommended tools with reasons"
                    ),
                ),
                (
                    "alternative_tools",
                    models.JSONField(default=list, help_text="Alternative options"),
                ),
                (
                    "tools_to_replace",
                    models.JSONField(
                        default=list, help_text="Current tools that should be replaced"
                    ),
                ),
                (
                    "implementation_phases",
                    models.JSONField(
                        default=list, help_text="Step-by-step implementation plan"
                    ),
                ),
                ("estimated_implementation_time", models.CharField(max_length=100)),
                (
                    "estimated_cost",
                    models.JSONField(
                        default=dict, help_text="Cost breakdown by tool/phase"
                    ),
                ),
                ("expected_benefits", models.JSONField(default=list)),
                (
                    "roi_analysis",
                    models.JSONField(
                        default=dict, help_text="Return on investment analysis"
                    ),
                ),
                (
                    "risk_assessment",
                    models.JSONField(
                        default=dict,
                        help_text="Potential risks and mitigation strategies",
                    ),
                ),
                (
                    "is_premium",
                    models.BooleanField(
                        default=False,
                        help_text="Premium recommendations require payment",
                    ),
                ),
                (
                    "access_tier",
                    models.CharField(
                        choices=[
                            ("free", "Free Basic"),
                            ("pro", "Pro User"),
                            ("enterprise", "Enterprise"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("generating", "Generating"),
                            ("ready", "Ready"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("viewed_count", models.IntegerField(default=0)),
                ("shared_count", models.IntegerField(default=0)),
                (
                    "tools_adopted",
                    models.JSONField(
                        default=list, help_text="Tools user actually adopted"
                    ),
                ),
                ("was_helpful", models.BooleanField(blank=True, null=True)),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("feedback", models.TextField(blank=True)),
                ("ai_model_used", models.CharField(blank=True, max_length=100)),
                ("generation_time_seconds", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Recommendations expire and need refresh",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PremiumReport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tier",
                    models.CharField(
                        choices=[
                            ("basic", "Basic - $29"),
                            ("standard", "Standard - $59"),
                            ("premium", "Premium - $99"),
                        ],
                        default="basic",
                        max_length=20,
                    ),
                ),
                ("price_paid", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Payment"),
                            ("paid", "Paid"),
                            ("refunded", "Refunded"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "stripe_payment_intent_id",
                    models.CharField(blank=True, max_length=100),
                ),
                ("payment_date", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Input"),
                            ("generating", "Generating"),
                            ("ready", "Ready"),
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "user_inputs",
                    models.JSONField(
                        default=dict,
                        help_text="User-provided information for report customization",
                    ),
                ),
                (
                    "report_data",
                    models.JSONField(
                        default=dict, help_text="Generated report content"
                    ),
                ),
                (
                    "pdf_file",
                    models.FileField(
                        blank=True, null=True, upload_to="premium_reports/"
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("executive_summary", models.TextField(blank=True)),
                ("page_count", models.IntegerField(default=0)),
                ("word_count", models.IntegerField(default=0)),
                ("download_count", models.IntegerField(default=0)),
                ("max_downloads", models.IntegerField(default=10)),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Report access expires after this date",
                        null=True,
                    ),
                ),
                (
                    "share_url",
                    models.CharField(blank=True, max_length=200, unique=True),
                ),
                ("consultation_scheduled", models.BooleanField(default=False)),
                ("consultation_date", models.DateTimeField(blank=True, null=True)),
                ("consultation_notes", models.TextField(blank=True)),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("feedback", models.TextField(blank=True)),
                ("generation_started", models.DateTimeField(blank=True, null=True)),
                ("generation_completed", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReportTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField()),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("tool_comparison", "Tool Comparison Report"),
                            ("tech_stack", "Tech Stack Recommendation"),
                            ("migration_plan", "Migration Planning Report"),
                            ("cost_analysis", "Cost Analysis Report"),
                            ("security_audit", "Security Audit Report"),
                            ("performance_benchmark", "Performance Benchmark"),
                        ],
                        default="tool_comparison",
                        max_length=50,
                    ),
                ),
                (
                    "price_basic",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("29.00"),
                        help_text="Basic report price",
                        max_digits=10,
                    ),
                ),
                (
                    "price_standard",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("59.00"),
                        help_text="Standard report with more details",
                        max_digits=10,
                    ),
                ),
                (
                    "price_premium",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("99.00"),
                        help_text="Premium report with consultation call",
                        max_digits=10,
                    ),
                ),
                (
                    "basic_features",
                    models.JSONField(default=list, help_text="Features in basic tier"),
                ),
                (
                    "standard_features",
                    models.JSONField(
                        default=list, help_text="Features in standard tier"
                    ),
                ),
                (
                    "premium_features",
                    models.JSONField(
                        default=list, help_text="Features in premium tier"
                    ),
                ),
                (
                    "sections",
                    models.JSONField(
                        default=list,
                        help_text="List of section templates for the report",
                    ),
                ),
                (
                    "required_inputs",
                    models.JSONField(
                        default=list,
                        help_text="Required user inputs for report generation",
                    ),
                ),
                (
                    "ai_prompts",
                    models.JSONField(
                        default=dict, help_text="AI prompts for each section"
                    ),
                ),
                (
                    "generation_time_minutes",
                    models.IntegerField(
                        default=15, help_text="Estimated time to generate report"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("sort_order", models.IntegerField(default=0)),
                (
                    "sample_url",
                    models.URLField(blank=True, help_text="Link to sample report"),
                ),
                ("total_purchases", models.IntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=3
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "subscription_tier",
                    models.CharField(
                        choices=[
                            ("free", "Free (up to 3 members)"),
                            ("pro", "Pro (up to 10 members)"),
                            ("enterprise", "Enterprise (unlimited)"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                ("max_members", models.IntegerField(default=3)),
                (
                    "features_enabled",
                    models.JSONField(
                        default=dict,
                        help_text="Which features are enabled for this team",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TechStackProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(blank=True, max_length=200)),
                (
                    "industry",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("fintech", "Financial Technology"),
                            ("healthcare", "Healthcare"),
                            ("ecommerce", "E-commerce"),
                            ("saas", "SaaS"),
                            ("enterprise", "Enterprise Software"),
                            ("startup", "Startup"),
                            ("agency", "Agency"),
                            ("education", "Education"),
                            ("gaming", "Gaming"),
                            ("other", "Other"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "team_size",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("solo", "Solo Developer"),
                            ("2-5", "2-5 people"),
                            ("6-10", "6-10 people"),
                            ("11-50", "11-50 people"),
                            ("51-200", "51-200 people"),
                            ("201+", "201+ people"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "programming_languages",
                    models.JSONField(
                        default=list,
                        help_text="Languages: Python, JavaScript, Go, Java, etc.",
                    ),
                ),
                (
                    "frameworks",
                    models.JSONField(
                        default=list,
                        help_text="Frameworks: Django, React, Spring Boot, etc.",
                    ),
                ),
                (
                    "cloud_providers",
                    models.JSONField(
                        default=list, help_text="AWS, GCP, Azure, Digital Ocean, etc."
                    ),
                ),
                (
                    "databases",
                    models.JSONField(
                        default=list, help_text="PostgreSQL, MongoDB, MySQL, etc."
                    ),
                ),
                (
                    "current_tools",
                    models.JSONField(
                        default=dict, help_text="Current DevOps tools by category"
                    ),
                ),
                (
                    "deployment_frequency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("multiple_daily", "Multiple times per day"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("biweekly", "Bi-weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "infrastructure_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("cloud", "Cloud-native"),
                            ("hybrid", "Hybrid Cloud"),
                            ("on_premise", "On-premise"),
                            ("containerized", "Containerized"),
                            ("serverless", "Serverless"),
                            ("mixed", "Mixed"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "compliance_requirements",
                    models.JSONField(
                        default=list, help_text="SOC2, HIPAA, GDPR, PCI-DSS, etc."
                    ),
                ),
                (
                    "budget_constraints",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("bootstrap", "Bootstrap/Minimal"),
                            ("moderate", "Moderate"),
                            ("enterprise", "Enterprise"),
                            ("unlimited", "Budget not a constraint"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "priorities",
                    models.JSONField(
                        default=list,
                        help_text="speed, cost, security, scalability, ease_of_use, etc.",
                    ),
                ),
                (
                    "current_challenges",
                    models.JSONField(
                        default=list, help_text="What problems are you trying to solve?"
                    ),
                ),
                (
                    "goals",
                    models.JSONField(
                        default=list, help_text="What are you trying to achieve?"
                    ),
                ),
                ("is_complete", models.BooleanField(default=False)),
                ("completion_percentage", models.IntegerField(default=0)),
                (
                    "last_recommendation_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("recommendation_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tech_stack_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeamMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("owner", "Owner"),
                            ("admin", "Admin"),
                            ("member", "Member"),
                            ("viewer", "Viewer"),
                        ],
                        default="member",
                        max_length=20,
                    ),
                ),
                ("can_invite", models.BooleanField(default=False)),
                ("can_manage_settings", models.BooleanField(default=False)),
                ("can_create_reports", models.BooleanField(default=True)),
                ("can_view_analytics", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("invited", "Invited"),
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("left", "Left"),
                        ],
                        default="invited",
                        max_length=20,
                    ),
                ),
                ("invited_at", models.DateTimeField(auto_now_add=True)),
                ("joined_at", models.DateTimeField(blank=True, null=True)),
                ("left_at", models.DateTimeField(blank=True, null=True)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="monetization.team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="team",
            name="members",
            field=models.ManyToManyField(
                related_name="teams",
                through="monetization.TeamMembership",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="owned_teams",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="shared_recommendations",
            field=models.ManyToManyField(
                blank=True,
                related_name="shared_with_teams",
                to="monetization.customrecommendation",
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="shared_reports",
            field=models.ManyToManyField(
                blank=True,
                related_name="shared_with_teams",
                to="monetization.premiumreport",
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="tech_stack",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="teams",
                to="monetization.techstackprofile",
            ),
        ),
        migrations.CreateModel(
            name="ReportPurchaseAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("referrer", models.URLField(blank=True)),
                ("utm_source", models.CharField(blank=True, max_length=100)),
                ("utm_medium", models.CharField(blank=True, max_length=100)),
                ("utm_campaign", models.CharField(blank=True, max_length=100)),
                ("time_on_sales_page_seconds", models.IntegerField(default=0)),
                ("viewed_samples", models.BooleanField(default=False)),
                ("viewed_testimonials", models.BooleanField(default=False)),
                (
                    "funnel_stage_reached",
                    models.CharField(
                        choices=[
                            ("landing", "Landed on Page"),
                            ("form_started", "Started Form"),
                            ("form_completed", "Completed Form"),
                            ("payment_initiated", "Payment Initiated"),
                            ("payment_completed", "Payment Completed"),
                        ],
                        default="landing",
                        max_length=50,
                    ),
                ),
                ("test_variant", models.CharField(default="A", max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "report",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to="monetization.premiumreport",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="premiumreport",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="reports",
                to="monetization.reporttemplate",
            ),
        ),
        migrations.AddField(
            model_name="premiumreport",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="premium_reports",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="IntegrationRoadmap",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("description", models.TextField()),
                (
                    "integration_points",
                    models.JSONField(
                        default=list,
                        help_text="How tools will integrate with each other",
                    ),
                ),
                (
                    "phases",
                    models.JSONField(
                        default=list, help_text="Implementation phases with timelines"
                    ),
                ),
                ("total_duration_weeks", models.IntegerField(default=0)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("target_completion_date", models.DateField(blank=True, null=True)),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("required_skills", models.JSONField(default=list)),
                ("external_consultants_needed", models.BooleanField(default=False)),
                (
                    "dependencies",
                    models.JSONField(
                        default=list, help_text="Prerequisites and dependencies"
                    ),
                ),
                (
                    "blockers",
                    models.JSONField(default=list, help_text="Current blockers"),
                ),
                ("current_phase", models.IntegerField(default=0)),
                ("completion_percentage", models.IntegerField(default=0)),
                ("milestones_completed", models.JSONField(default=list)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("planned", "Planned"),
                            ("in_progress", "In Progress"),
                            ("on_hold", "On Hold"),
                            ("completed", "Completed"),
                            ("canceled", "Canceled"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("is_premium", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="integration_roadmaps",
                        to="monetization.team",
                    ),
                ),
                (
                    "tools",
                    models.ManyToManyField(
                        related_name="integration_roadmaps", to="tools.tool"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="integration_roadmaps",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="customrecommendation",
            name="tech_stack_profile",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recommendations",
                to="monetization.techstackprofile",
            ),
        ),
        migrations.AddField(
            model_name="customrecommendation",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="custom_recommendations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="CostCalculator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("team_size", models.IntegerField(default=5)),
                ("monthly_active_users", models.IntegerField(default=100)),
                ("api_calls_per_month", models.IntegerField(default=10000)),
                ("storage_gb", models.IntegerField(default=100)),
                ("bandwidth_gb", models.IntegerField(default=500)),
                (
                    "custom_metrics",
                    models.JSONField(
                        default=dict, help_text="Tool-specific usage metrics"
                    ),
                ),
                (
                    "tool_costs",
                    models.JSONField(default=dict, help_text="Individual tool costs"),
                ),
                (
                    "total_monthly_cost",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "total_yearly_cost",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "scenarios",
                    models.JSONField(
                        default=list, help_text="Different tool combination scenarios"
                    ),
                ),
                ("recommended_scenario", models.IntegerField(blank=True, null=True)),
                (
                    "potential_savings",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                ("savings_opportunities", models.JSONField(default=list)),
                (
                    "hidden_costs",
                    models.JSONField(default=list, help_text="Often-overlooked costs"),
                ),
                ("is_premium", models.BooleanField(default=True)),
                ("is_shared", models.BooleanField(default=False)),
                (
                    "share_url",
                    models.CharField(blank=True, max_length=200, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cost_calculations",
                        to="monetization.team",
                    ),
                ),
                (
                    "tools",
                    models.ManyToManyField(
                        related_name="cost_calculations", to="tools.tool"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cost_calculations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ConsultingResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField()),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("template", "Template"),
                            ("checklist", "Checklist"),
                            ("framework", "Framework"),
                            ("worksheet", "Worksheet"),
                            ("case_study", "Case Study"),
                            ("whitepaper", "White Paper"),
                        ],
                        default="template",
                        max_length=50,
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True, null=True, upload_to="consulting/resources/"
                    ),
                ),
                ("preview_url", models.URLField(blank=True)),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Available to all users or only clients?",
                    ),
                ),
                ("tags", models.JSONField(default=list)),
                ("download_count", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "requires_package",
                    models.ForeignKey(
                        blank=True,
                        help_text="Only available to clients who booked this package",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resources",
                        to="monetization.consultingpackage",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ConsultingBooking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(max_length=200)),
                ("contact_email", models.EmailField(max_length=254)),
                ("contact_phone", models.CharField(blank=True, max_length=50)),
                (
                    "company_size",
                    models.CharField(
                        choices=[
                            ("1-10", "1-10 employees"),
                            ("11-50", "11-50 employees"),
                            ("51-200", "51-200 employees"),
                            ("201-500", "201-500 employees"),
                            ("501+", "501+ employees"),
                        ],
                        default="11-50",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("inquiry", "Initial Inquiry"),
                            ("pending_payment", "Pending Payment"),
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("canceled", "Canceled"),
                            ("rescheduled", "Rescheduled"),
                        ],
                        default="inquiry",
                        max_length=20,
                    ),
                ),
                (
                    "preferred_dates",
                    models.JSONField(
                        default=list, help_text="List of preferred date/time slots"
                    ),
                ),
                ("scheduled_date", models.DateTimeField(blank=True, null=True)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                (
                    "meeting_link",
                    models.URLField(blank=True, help_text="Zoom/Meet link"),
                ),
                (
                    "project_description",
                    models.TextField(help_text="What are you trying to achieve?"),
                ),
                (
                    "current_tech_stack",
                    models.JSONField(
                        default=list, help_text="Current tools and technologies"
                    ),
                ),
                (
                    "pain_points",
                    models.JSONField(default=list, help_text="Current challenges"),
                ),
                ("goals", models.JSONField(default=list, help_text="Desired outcomes")),
                (
                    "budget_range",
                    models.CharField(
                        choices=[
                            ("0-10k", "$0-$10,000"),
                            ("10k-50k", "$10,000-$50,000"),
                            ("50k-100k", "$50,000-$100,000"),
                            ("100k-500k", "$100,000-$500,000"),
                            ("500k+", "$500,000+"),
                            ("flexible", "Flexible"),
                        ],
                        default="flexible",
                        max_length=50,
                    ),
                ),
                (
                    "timeline",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate (< 1 month)"),
                            ("short", "Short term (1-3 months)"),
                            ("medium", "Medium term (3-6 months)"),
                            ("long", "Long term (6+ months)"),
                            ("exploratory", "Just exploring"),
                        ],
                        default="medium",
                        max_length=50,
                    ),
                ),
                ("price_quoted", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "price_paid",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("paid", "Paid"),
                            ("refunded", "Refunded"),
                            ("partial", "Partially Paid"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "stripe_payment_intent_id",
                    models.CharField(blank=True, max_length=100),
                ),
                ("payment_date", models.DateTimeField(blank=True, null=True)),
                ("invoice_number", models.CharField(blank=True, max_length=100)),
                (
                    "assessment_report",
                    models.FileField(
                        blank=True, null=True, upload_to="consulting/reports/"
                    ),
                ),
                (
                    "recommendations",
                    models.JSONField(
                        default=dict, help_text="Tool and strategy recommendations"
                    ),
                ),
                (
                    "implementation_roadmap",
                    models.JSONField(
                        default=dict, help_text="Step-by-step implementation plan"
                    ),
                ),
                (
                    "cost_analysis",
                    models.JSONField(
                        default=dict, help_text="Cost projections and ROI analysis"
                    ),
                ),
                (
                    "prep_notes",
                    models.TextField(
                        blank=True, help_text="Consultant preparation notes"
                    ),
                ),
                (
                    "session_notes",
                    models.TextField(
                        blank=True, help_text="Notes from the consultation"
                    ),
                ),
                (
                    "action_items",
                    models.JSONField(default=list, help_text="Follow-up action items"),
                ),
                ("follow_up_scheduled", models.DateTimeField(blank=True, null=True)),
                ("follow_up_completed", models.BooleanField(default=False)),
                (
                    "client_questions",
                    models.JSONField(
                        default=list,
                        help_text="Questions from client after consultation",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("testimonial", models.TextField(blank=True)),
                ("can_publish_testimonial", models.BooleanField(default=False)),
                ("feedback_date", models.DateTimeField(blank=True, null=True)),
                ("internal_notes", models.TextField(blank=True)),
                (
                    "revenue_category",
                    models.CharField(
                        choices=[
                            ("new_client", "New Client"),
                            ("repeat_client", "Repeat Client"),
                            ("upsell", "Upsell"),
                            ("referral", "Referral"),
                        ],
                        default="new_client",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="consultations",
                        to="monetization.consultingpackage",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="consulting_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-scheduled_date"],
            },
        ),
        migrations.CreateModel(
            name="ConsultantAvailability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("is_available", models.BooleanField(default=True)),
                ("is_booked", models.BooleanField(default=False)),
                ("is_recurring", models.BooleanField(default=False)),
                (
                    "recurrence_pattern",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("biweekly", "Bi-weekly"),
                            ("monthly", "Monthly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="time_slots",
                        to="monetization.consultingbooking",
                    ),
                ),
                (
                    "consultant",
                    models.ForeignKey(
                        limit_choices_to={"is_staff": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availability_slots",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["date", "start_time"],
            },
        ),
        migrations.AddIndex(
            model_name="teammembership",
            index=models.Index(
                fields=["team", "status"], name="monetizatio_team_id_eee688_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="teammembership",
            unique_together={("team", "user")},
        ),
        migrations.AddIndex(
            model_name="premiumreport",
            index=models.Index(
                fields=["user", "status"], name="monetizatio_user_id_727d14_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="premiumreport",
            index=models.Index(
                fields=["payment_status", "status"],
                name="monetizatio_payment_46f0a2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="customrecommendation",
            index=models.Index(
                fields=["user", "status"], name="monetizatio_user_id_0f8625_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customrecommendation",
            index=models.Index(
                fields=["is_premium", "access_tier"],
                name="monetizatio_is_prem_d1805a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="consultingbooking",
            index=models.Index(
                fields=["status", "scheduled_date"],
                name="monetizatio_status_1847db_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="consultingbooking",
            index=models.Index(
                fields=["user", "status"], name="monetizatio_user_id_7071b9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="consultantavailability",
            index=models.Index(
                fields=["consultant", "date", "is_available"],
                name="monetizatio_consult_89a637_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="consultantavailability",
            unique_together={("consultant", "date", "start_time")},
        ),
    ]
