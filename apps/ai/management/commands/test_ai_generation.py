from django.core.management.base import BaseCommand
from apps.ai.models import ContentTemplate, ContentGeneration
from apps.ai.services import ContentGenerator
import json


class Command(BaseCommand):
    help = 'Test AI content generation functionality'

    def add_arguments(self, parser):
        parser.add_argument(
            '--template-type',
            type=str,
            default='tool_review',
            help='Type of content template to test'
        )
        parser.add_argument(
            '--mock',
            action='store_true',
            help='Use mock responses instead of real AI calls'
        )

    def handle(self, *args, **options):
        template_type = options['template_type']
        use_mock = options['mock']
        
        self.stdout.write(self.style.SUCCESS(f'Testing AI content generation for: {template_type}'))
        
        try:
            # Get template
            template = ContentTemplate.objects.filter(
                template_type=template_type,
                is_active=True
            ).first()
            
            if not template:
                self.stdout.write(
                    self.style.ERROR(f'No active template found for type: {template_type}')
                )
                return
            
            self.stdout.write(f'Using template: {template.name}')
            
            # Prepare test data based on template type
            if template_type == 'tool_review':
                input_data = {
                    'tool_name': 'Docker',
                    'tool_description': 'Containerization platform for packaging applications',
                    'features': 'containerization, image management, orchestration',
                    'website_url': 'https://docker.com',
                    'category': 'Containerization'
                }
            elif template_type == 'tutorial':
                input_data = {
                    'title': 'Getting Started with Kubernetes',
                    'topic': 'Kubernetes basics and deployment',
                    'target_audience': 'intermediate',
                    'reading_time': '15'
                }
            elif template_type == 'comparison':
                input_data = {
                    'tools_list': 'Docker vs Podman vs LXC',
                    'comparison_focus': 'Container runtime comparison',
                    'target_audience': 'DevOps engineers'
                }
            elif template_type == 'guide':
                input_data = {
                    'title': 'How to Set Up CI/CD Pipeline',
                    'objective': 'Create automated deployment pipeline',
                    'tools': 'Jenkins, Docker, Git',
                    'difficulty_level': 'intermediate'
                }
            elif template_type == 'news':
                input_data = {
                    'title': 'Kubernetes 1.30 Released with New Features',
                    'topic': 'Kubernetes update and new capabilities',
                    'key_points': 'improved security, better performance, new APIs',
                    'sources': 'Kubernetes official blog, CNCF announcements'
                }
            else:
                input_data = {
                    'title': 'Test Content',
                    'topic': 'Testing AI generation',
                    'description': 'This is a test of the AI content generation system'
                }
            
            self.stdout.write(f'Input data: {json.dumps(input_data, indent=2)}')
            
            if use_mock:
                # Create mock content generation
                self.stdout.write(self.style.WARNING('Using mock AI response (no real API call)'))
                
                generation = ContentGeneration.objects.create(
                    template=template,
                    status='completed',
                    input_data=input_data,
                    generated_prompt=f"Mock prompt for {template.name}",
                    generated_content=f"""# Mock AI Generated Content for {template_type.title()}

This is a mock response for testing the AI content generation system.

## Overview
This mock content demonstrates the structure and format that would be generated by the AI system.

## Key Points
- Mock content generation working
- Template system functional  
- Database integration successful
- Ready for real AI integration

## Next Steps
1. Configure real AI API keys
2. Test with actual AI models
3. Fine-tune prompts and templates
4. Deploy to production

*This content was generated using mock mode for testing purposes.*""",
                    tokens_used=150,
                    estimated_cost=0.0003,
                    processing_time=0.1
                )
                
                self.stdout.write(
                    self.style.SUCCESS(f'Mock content generation created with ID: {generation.id}')
                )
                
            else:
                # Use real AI service
                self.stdout.write('Calling AI service...')
                
                try:
                    generator = ContentGenerator()
                    generation = generator.generate_from_template(
                        template_id=template.id,
                        input_data=input_data
                    )
                    
                    self.stdout.write(
                        self.style.SUCCESS(f'Content generation created with ID: {generation.id}')
                    )
                    self.stdout.write(f'Status: {generation.status}')
                    self.stdout.write(f'Tokens used: {generation.tokens_used}')
                    self.stdout.write(f'Estimated cost: ${generation.estimated_cost}')
                    
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'AI generation failed: {str(e)}')
                    )
                    self.stdout.write(
                        self.style.WARNING('Try running with --mock flag to test without AI API')
                    )
                    return
            
            # Display the generated content
            if generation.generated_content:
                self.stdout.write('\n' + '='*50)
                self.stdout.write(self.style.SUCCESS('Generated Content:'))
                self.stdout.write('='*50)
                self.stdout.write(generation.generated_content[:500] + '...' if len(generation.generated_content) > 500 else generation.generated_content)
                self.stdout.write('='*50)
            
            self.stdout.write(
                self.style.SUCCESS(f'\nAI content generation test completed successfully!')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Test failed: {str(e)}')
            )
